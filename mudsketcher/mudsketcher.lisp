(in-package :mudsketcher)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defclass cairo-w (drawing-area)
    ((draw-fn :initform 'draw-clock-face :accessor cairo-w-draw-fn))
    (:metaclass gobject:gobject-class)))

(defmethod initialize-instance :after ((w cairo-w) &rest initargs)
  (declare (ignore initargs))
  (gobject:connect-signal w "configure-event" (lambda (widget event)
                                                (declare (ignore event))
                                                (widget-queue-draw widget)))
  (gobject:connect-signal w "expose-event" (lambda (widget event)
                                             (declare (ignore event))
                                             (cc-expose widget))))

(defmethod (setf cairo-w-draw-fn) :after (new-value (w cairo-w))
  (declare (ignore new-value))
  (widget-queue-draw w))

(defun cc-expose (widget)
  (multiple-value-bind (w h) (gdk:drawable-get-size (widget-window widget))
    (with-gdk-context (ctx (widget-window widget))
      (with-context (ctx)
        (funcall (cairo-w-draw-fn widget) w h)
        nil))))

(defstruct cairo-fn name fn)

(defvar *coord* '(0 0))
(defparameter *edited-zone* (lispmud::load-zone "/home/vfedotov/projects/LispMud/content/1.lzon"))
(defparameter *selection* '(2 2))

(defun run-mudsketcher ()
  (setf *selection* '(2 2))
  (within-main-loop
    (let (x y)
      (let-ui (gtk-window
	       :var w
	       :default-width 300
	       :default-height 400
	       :type :toplevel
	       :title "Cairo drawing"
	       (v-box
		(cairo-w :var cw)))
	(connect-signal cw "realize"
			(lambda (widget)
			  (declare (ignore widget))
			  (pushnew :pointer-motion-mask (gdk-window-events (widget-window cw)))
			  (pushnew :BUTTON-PRESS-MASK (gdk-window-events (widget-window cw)))))
	(connect-signal cw "motion-notify-event"
			(lambda (widget event)
			  (declare (ignore widget))
			  (setf x (event-motion-x event)
				y (event-motion-y event))
			  (setf *coord* (list x y))
			  (widget-queue-draw cw)))
	(connect-signal cw "button_press_event"
			(lambda (widget event)
			  (declare (ignore widget))
			  (setf *selection* (list (event-button-x event) (event-button-y event)))
			  (widget-queue-draw cw)))
	(setf (cairo-w-draw-fn cw) 'draw-zone-map)
	(widget-show w)))))

(defparameter *room-size* 20)

(defun draw-room (x y room)
  (let ((fill-color (case (lispmud::place-type room)
		      (:forest cl-colors:+DARKGREEN+)
		      (:indoors cl-colors:+yellow+)
		      (:city cl-colors:+brown4+)
		      (otherwise cl-colors:+grey100+))))
    (set-line-width 2)
    (rectangle (- x (/ *room-size* 2)) (- y (/ *room-size* 2))
	       *room-size* *room-size*)
    (set-source-color fill-color)
    (fill-preserve)
    (set-source-rgb 1 0 0)
    (stroke)))

(defparameter *room-selection-size* 30)

(defun rounded-rectangle (x y w h r)
  (let* ((x0 (+ x r))
	 (y0 (+ y r))
	 (x1 (+ x w (- r)))
	 (y1 (+ y h (- r))))
    (arc x0 y0 r (deg-to-rad 180) (deg-to-rad 270))
    (arc x1 y0 r (deg-to-rad 270) (deg-to-rad 360))
    (arc x1 y1 r (deg-to-rad 0)   (deg-to-rad 90))
    (arc x0 y1 r (deg-to-rad 90)  (deg-to-rad 180))
    (fill-path)))

(defun draw-room-selection (x y)
  (rounded-rectangle (- x (/ *room-selection-size* 2)) (- y (/ *room-selection-size* 2))
		     *room-selection-size* *room-selection-size* 5)
  (fill-path))

(defun draw-point (x y)
  (set-line-width 3)
  (arc x y 10 0 (deg-to-rad 360))
;  (stroke)
  (set-source-rgb 1 1 1)
  (fill-preserve)
  (set-source-rgb 1 0 0)
  (stroke))

(defun draw-zone-map (w h)
;  (draw-room (first *coord*) (second *coord*))
  (let* ((x-mouse (first *coord*))
	 (y-mouse (second *coord*))
	 (map (lispmud::map-array *edited-zone*))
	 (x-dim (array-dimension map 0))
	 (w (* x-dim (round w (* 2 x-dim)) 2))
	 (x-grid-step (/ w x-dim))
	 (y-dim (array-dimension map 1))
	 (h (* y-dim (round h (* 2 y-dim)) 2))
	 (y-grid-step (/ h y-dim)))
    (flet ((x-coord (x) (* x-grid-step (+ 0.5 x)))
	   (y-coord (y) (* y-grid-step (+ 0.5 y)))
	   (hypot (x y) (sqrt (+ (* x x) (* y y)))))
      (iter (for x from 0 below x-dim)
	    (iter (for y from 0 below y-dim)
		  (when (aref map y x)
		    (if (lispmud::south-exit (aref map y x))
			(progn
			  (set-line-width 2)
			  (move-to (x-coord x) (y-coord y))
			  (line-to (x-coord x) (y-coord (1+ y)))
			  (set-source-rgb 0 0 0)
			  (stroke)))
		    (if (lispmud::east-exit (aref map y x))
			(progn
			  (set-line-width 2)
			  (move-to (x-coord x) (y-coord y))
			  (line-to (x-coord (1+ x)) (y-coord y))
			  (set-source-rgb 0 0 0)
			  (stroke))))))
      (iter (with x-dim = (array-dimension map 0))
	    (for x from 0 below x-dim)
	    (iter (with y-dim = (array-dimension map 1))
		  (for y from 0 below y-dim)
		  (when (aref map y x)
		    (set-source-color cl-colors:+grey55+)
		    (when (< (hypot (- x-mouse (x-coord x)) (- y-mouse (y-coord y))) 20)
		      (draw-room-selection (x-coord x) (y-coord y)))
		    (set-source-color cl-colors:+grey25+)
		    (when (and *selection* (< (hypot (- (first *selection*) (x-coord x)) (- (second *selection*) (y-coord y))) 20))
		      (draw-room-selection (x-coord x) (y-coord y)))
		    (draw-room (* (/ w x-dim) (+ 0.5 x))
			       (* (/ h y-dim) (+ 0.5 y))
			       (aref map y x))))))))


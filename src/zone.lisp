(in-package :lispmud)

(defclass zone ()
  ((room-list :initarg :roomlist :initform nil)
   (exit-hash :initarg :exithash :initform (make-hash-table :test 'equal))
   (description :initarg :description)))

(defun load-zone (file-name)
  (with-open-file (stream file-name)
    (let ((zone (make-instance 'zone :description (read stream))))
      (with-slots (room-list exit-hash) zone
	(let ((room-id-hash (make-hash-table :test 'equal)))
	  (dolist (room-plist (read stream))
	    (let ((cur-room  (make-instance 'room1 :description (getf room-plist :desription))))
	      (push cur-room room-list)
	      (setf (gethash (getf room-plist :id) room-id-hash)  (getf room-plist :id)) 
	      (dolist (i '(:south :north :west :east))
		(setf (gethash (cons cur-room i) exit-hash) (getf room-plist i)))))
	  (maphash #'(lambda (key val)
		       (setf (gethash key exit-hash) (gethash val room-id-hash)))
		   exit-hash)
					;(print exit-hash)
	  (maphash #'(lambda (key val)
		       (format t "~a ~a~%" key val))
		   exit-hash)
	  zone)))))
